package com.nnk.springboot.domain;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;

import java.sql.Timestamp;


/**
 * Represents a trade transaction entity within the financial application.
 * <p>
 * This entity maps to the "trade" table in the database and encapsulates
 * all data related to a trade, including quantities, prices, metadata and audit information.
 * </p>
 */
@Slf4j
@Data
@Entity
@Table(name = "trade")
public class Trade implements DomainModel<Trade> {

    /**
     * Primary key of the Trade entity.
     * Auto-generated by the database (identity strategy).
     * <p>Constrained between -128 and 127, stored as a TINYINT in the database.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "tradeid", updatable = false)
    private Integer id;

    /**
     * Account associated with the trade.
     * Cannot be null or blank.
     * Maximum length: 30 characters.
     */
    @NotBlank(message = "account can't be null nor blank")
    @Size(max = 30, message = "account must not exceed 30 characters.")
    @Column(length = 30, nullable = false)
    private String account;

    /**
     * Type of the trade.
     * Cannot be null or blank.
     * Maximum length: 30 characters.
     */
    @NotBlank(message = "type can't be null nor blank")
    @Size(max = 30, message = "type must not exceed 30 characters.")
    @Column(length = 30, nullable = false)
    private String type;

    /**
     * Quantity of assets bought in the trade.
     */
    @Column(name = "buyquantity")
    private Double buyQuantity = 0.0;

    /**
     * Quantity of assets sold in the trade.
     */
    @Column(name = "sellquantity")
    private Double sellQuantity = 0.0;

    /**
     * Price per unit for the buy side.
     */
    @Column(name = "buyprice")
    private Double buyPrice = 0.0;

    /**
     * Price per unit for the sell side.
     */
    @Column(name = "sellprice")
    private Double sellPrice = 0.0;

    /**
     * Date and time when the trade occurred.
     * Initialized to current system time.
     */
    @Column(name = "tradedate")
    private Timestamp tradeDate = new Timestamp(System.currentTimeMillis());

    /**
     * Security involved in the trade.
     * Optional, max 125 characters.
     */
    @Size(max = 125, message = "security must not exceed 125 characters.")
    @Column(length = 125)
    private String security = "";

    /**
     * Current status of the trade.
     * Optional, max 10 characters.
     */
    @Size(max = 10, message = "status must not exceed 10 characters.")
    @Column(length = 10)
    private String status = "";

    /**
     * Trader identifier or name.
     * Optional, max 125 characters.
     */
    @Size(max = 125, message = "trader must not exceed 125 characters.")
    @Column(length = 125)
    private String trader = "";

    /**
     * Benchmark used for comparison or performance evaluation.
     * Optional, max 125 characters.
     */
    @Size(max = 125, message = "benchmark must not exceed 125 characters.")
    @Column(length = 125)
    private String benchmark = "";

    /**
     * Book identifier in which the trade is recorded.
     * Optional, max 125 characters.
     */
    @Size(max = 125, message = "book must not exceed 125 characters.")
    @Column(length = 125)
    private String book = "";

    /**
     * Name of the user or system that created the trade entry.
     */
    @Size(max = 125, message = "creationName must not exceed 125 characters.")
    @Column(name = "creationname", length = 125)
    private String creationName = "";

    /**
     * Timestamp when the trade was created.
     * Automatically set to current system time.
     */
    @Column(name = "creationdate")
    private Timestamp creationDate = new Timestamp(System.currentTimeMillis());

    /**
     * Name of the user or system that last modified the trade.
     */
    @Size(max = 125, message = "revisionName must not exceed 125 characters.")
    @Column(name = "revisionname", length = 125)
    private String revisionName = "";

    /**
     * Timestamp of the last revision.
     * Automatically updated in the {@code update} method.
     */
    @Column(name = "revisiondate")
    private Timestamp revisionDate = new Timestamp(System.currentTimeMillis());

    /**
     * Name of the deal associated with the trade.
     */
    @Size(max = 125, message = "dealName must not exceed 125 characters.")
    @Column(name = "dealname", length = 125)
    private String dealName = "";

    /**
     * Type of the deal.
     */
    @Size(max = 125, message = "dealType must not exceed 125 characters.")
    @Column(name = "dealtype", length = 125)
    private String dealType = "";

    /**
     * Identifier for the source list used to match this trade.
     */
    @Size(max = 125, message = "sourceListId must not exceed 125 characters.")
    @Column(name = "sourcelistid", length = 125)
    private String sourceListId = "";

    /**
     * Trade direction or side.
     */
    @Size(max = 125, message = "side must not exceed 125 characters.")
    @Column(length = 125)
    private String side = "";


    /**
     * Updates the current Trade with selected fields from another Trade.
     *
     * <p>Only the following fields are updated:</p>
     * <ul>
     *     <li>{@code account}</li>
     *     <li>{@code type}</li>
     *     <li>{@code buyQuantity}</li>
     *     <li>{@code revisionDate} (set to current time)</li>
     * </ul>
     *
     * @param trade the Trade object containing new data
     * @return the updated Trade instance
     */
    public Trade update(Trade trade){
        this.account = trade.getAccount();
        this.type = trade.getType();
        this.buyQuantity = trade.getBuyQuantity();
        this.revisionDate = new Timestamp(System.currentTimeMillis());

        return this;
    }

}
