package com.nnk.springboot.domain;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Pattern;
import lombok.*;
import lombok.extern.slf4j.Slf4j;


/**
 * Represents a user of the application.
 * <p>This entity maps to the "users" table and includes authentication and authorization fields.</p>
 */
@Slf4j
@Data
@Entity
@Table(name = "users")
public class User implements DomainModel<User> {


    /**
     * Primary key for the User entity.
     * Auto-generated by the database using identity strategy.
     * <p>Constrained between -128 and 127, stored as a TINYINT in the database.</p>
     */
    @Id
    @GeneratedValue(strategy= GenerationType.IDENTITY)
    @Column(updatable = false)
    private Integer id;

    /**
     * Username of the user.
     * Must not be blank and must be unique in the system.
     */
    @NotBlank(message = "Username is mandatory")
    @Column(nullable = false, unique = true)
    private String username;

    /**
     * Password of the user.
     * Must satisfy the following security rules:
     * <ul>
     *     <li>At least 8 characters long</li>
     *     <li>At least one uppercase letter</li>
     *     <li>At least one digit</li>
     *     <li>At least one special character</li>
     * </ul>
     */
    @NotBlank(message = "Password is mandatory")
    @Pattern(
            regexp = "^(?=.*[A-Z])(?=.*\\d)(?=.*[^a-zA-Z\\d]).{8,}$",
            message = "Password must be at least 8 characters long, contain at least one uppercase letter, one digit, and one special character"
    )
    @Column(nullable = false)
    private String password;

    /**
     * Full name of the user.
     * Must not be blank.
     */
    @NotBlank(message = "FullName is mandatory")
    @Column(nullable = false)
    private String fullname;

    /**
     * Role of the user in the system (ADMIN, USER).
     * Must not be blank.
     */
    @NotBlank(message = "Role is mandatory")
    @Column(nullable = false)
    private String role;



    /**
     * Updates the current user entity with values from another user instance.
     * <p>All fields except the ID are updated.</p>
     *
     * @param user the user object containing the updated values
     * @return the updated User instance
     */
    public User update(User user){
        this.username = user.getUsername();
        this.password = user.getPassword();
        this.fullname = user.getFullname();
        this.role = user.getRole();

        return this;
    }

}
