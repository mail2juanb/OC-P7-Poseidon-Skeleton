package com.nnk.springboot.domain;

import jakarta.persistence.*;
import jakarta.validation.constraints.Size;
import lombok.Data;
import lombok.extern.slf4j.Slf4j;

/**
 * Represents a business rule definition entity used in the system.
 * <p>
 * This entity is mapped to the "rulename" table in the database and is used
 * to store logic rules defined with metadata such as name, description, JSON structure,
 * template, and SQL components.
 * </p>
 */
@Slf4j
@Data
@Entity
@Table(name = "rulename")
public class RuleName implements DomainModel<RuleName> {

    /**
     * Primary key of the RuleName entity.
     * Automatically generated by the database.
     * <p>Constrained between -128 and 127, stored as a TINYINT in the database.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(updatable = false)
    private Integer id;

    /**
     * Name of the rule.
     * Maximum length: 125 characters.
     */
    @Size(max = 125, message = "name must not exceed 125 characters.")
    @Column(length = 125)
    private String name;

    /**
     * Description of the rule's purpose or logic.
     * Maximum length: 125 characters.
     */
    @Size(max = 125, message = "description must not exceed 125 characters.")
    @Column(length = 125)
    private String description;

    /**
     * JSON representation of the rule logic.
     * Maximum length: 125 characters.
     */
    @Size(max = 125, message = "json must not exceed 125 characters.")
    @Column(length = 125)
    private String json;

    /**
     * Textual template used for dynamic rule generation.
     * Maximum length: 512 characters.
     */
    @Size(max = 512, message = "template must not exceed 512 characters.")
    @Column(length = 512)
    private String template;

    /**
     * SQL string associated with the rule logic.
     * Maximum length: 125 characters.
     */
    @Size(max = 125, message = "sqlStr must not exceed 125 characters.")
    @Column(name = "sqlstr", length = 125)
    private String sqlStr;

    /**
     * SQL clause or fragment used by the rule.
     * Maximum length: 125 characters.
     */
    @Size(max = 125, message = "sqlPart must not exceed 125 characters.")
    @Column(name = "sqlpart", length = 125)
    private String sqlPart;


    /**
     * Updates the current RuleName with data from another instance.
     *
     * <p>The following fields are updated:</p>
     * <ul>
     *     <li>{@code name}</li>
     *     <li>{@code description}</li>
     *     <li>{@code json}</li>
     *     <li>{@code template}</li>
     *     <li>{@code sqlStr}</li>
     *     <li>{@code sqlPart}</li>
     * </ul>
     *
     * @param ruleName the RuleName instance containing the updated data
     * @return the updated RuleName instance
     */
    @Override
    public RuleName update(RuleName ruleName){
        this.name = ruleName.getName();
        this.description = ruleName.getDescription();
        this.json = ruleName.getJson();
        this.template = ruleName.getTemplate();
        this.sqlStr = ruleName.getSqlStr();
        this.sqlPart = ruleName.getSqlPart();

        return this;
    }

}
