package com.nnk.springboot.domain;

import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.Size;
import lombok.Data;

import lombok.extern.slf4j.Slf4j;

/**
 * Represents a financial rating assigned by different rating agencies.
 * <p>
 * This entity is mapped to the "rating" table in the database and stores
 * rating values .
 * </p>
 */
@Slf4j
@Data
@Entity
@Table(name = "rating")
public class Rating implements DomainModel<Rating> {

    /**
     * Primary identifier for the Rating entity.
     * It is auto-generated by the database.
     * <p>Constrained between -128 and 127, stored as a TINYINT in the database.</p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(updatable = false)
    private Integer id;

    /**
     * Rating provided by Moody's.
     * Limited to 125 characters.
     */
    @Size(max = 125, message = "moodysRating must not exceed 125 characters.")
    @Column(name = "moodysrating", length = 125)
    private String moodysRating = "";

    /**
     * Rating provided by SandP.
     * Limited to 125 characters.
     */
    @Size(max = 125, message = "sandPRating must not exceed 125 characters.")
    @Column(name = "sandprating", length = 125)
    private String sandPRating = "";

    /**
     * Rating provided by Fitch.
     * Limited to 125 characters.
     */
    @Size(max = 125, message = "fitchRating must not exceed 125 characters.")
    @Column(name ="fitchrating", length = 125)
    private String fitchRating = "";

    /**
     * Order number used to sort or rank this rating.
     * <p>Constrained between -128 and 127, stored as a TINYINT in the database.</p>
     */
    @Min(value = -128, message = "orderNumber must be greater than or equal to -128")
    @Max(value = 127, message = "orderNumber must be less than or equal to 127")
    @Column(name = "ordernumber", columnDefinition = "TINYINT")
    private Integer orderNumber = 0;


    /**
     * Updates the current {@code Rating} instance with data from another instance.
     *
     * <p>The following fields are updated:</p>
     * <ul>
     *     <li>{@code moodysRating}</li>
     *     <li>{@code sandPRating}</li>
     *     <li>{@code fitchRating}</li>
     *     <li>{@code orderNumber}</li>
     * </ul>
     *
     * @param rating the {@link Rating} instance containing updated data
     * @return the updated {@link Rating} instance
     */
    @Override
    public Rating update(Rating rating){
        this.moodysRating = rating.getMoodysRating();
        this.sandPRating = rating.getSandPRating();
        this.fitchRating = rating.getFitchRating();
        this.orderNumber = rating.getOrderNumber();

        return this;
    }

}
